1. Find total channels across all images     --> done
2. Create mask and Polygons ---> done
3. Image processing using Image Indexing
4. Create new 3 channels which can be fed directly to mask-rcnn  ----> done
5. Train a simple mask-rcnn model.



a. Change Criterion ---> Use DICE Loss or Cross-entropy Loss   ---> done
a1. Use the metric in competition for judging    ---> done
b. Wrap model in a class  ---> done      
c. Set Model for training   ---> done


1. apply albumentation to train data    ---> data
2. Use some pretext data, then fine-tune on given data  ---> the current pretext data is very poor
3. Image pre-processing... of tif channels


UNET ------->
(see table with available weights for each encoder_name)
decoder_attention_type
activation 

UNET++ -------->
Decoder of Unet++ is more complex than in usual Unet.

______________________________________________________________________________________________________
Tomoro's tasks--->
- Create DAFPN module  ---> done
- Read the 6 papers on desktop, make notes from them   ----> done
- Finalise modelling strategies and combinations    ---
- Wrap each model in class and train on main data   ---> done
- MMU-Net implementation ---> will see it later


Tasks--->
- Create data with same pixel size
- Apply augmentation:
        - auto
        - selection
- Check if image logging properly in wandb
- Other models (except mask-rcnn) run for the data, 
- create report


New tasks --->
- see how to read tif format image using utils of detectron2
       - It only supports 3 formats, opens in PIL format, then sends in numpy format
       - Create custom reader

- Override __call__ of DataMapper for image-reading   ---> done
    - https://detectron2.readthedocs.io/en/latest/_modules/detectron2/data/dataset_mapper.html#DatasetMapper

- See how to use custom designed FPN like DAFPN (look for model registry)   --> done
- Apply modified header to accept images with varying channels
- add hooks for visualization 
- DefaultTrainer
   - update train/test_loader   ----> done
   - update optimizer function to support other optimizers (currently support SGD only)     ---> later
   - Override build-hooks function to be abletoaccept hooks as parameters      ---> done

    - See how to do testing and evalutaion ---> done


New Tasks --->
- fill MetadataCatalog completely with evaluator_type ---> done
- Predictor implementation for generating mask for test dataset  ----> done

Connect all things, cfg ,model , loaders , everything
